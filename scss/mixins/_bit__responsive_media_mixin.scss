//     _____       _ _     
//    |     |___ _| |_|___ 
//    | | | | -_| . | | .'|
//    |_|_|_|___|___|_|__,| mixin
//
//    Live example: http://www.sassmeister.com/gist/a61085d4406b876c422a
//
//    Creates @media expression for each defined resolution in resolution map
//    Usage: @include media(mobile, tablet, phablet) { [your CSS] }
//
@mixin media($breakpoints...) {
  @each $breakpoint in $breakpoints {
    // Search through array for our resolution
    $breakpoint: to-lower-case(unquote($breakpoint));
    
    @for $i from 1 through length($resolutions) {
      // Meaningful var names extracted from array
      $resolution: nth(map-values($resolutions), $i); // Resolution map
      $breakpointName: map-get($resolution, name) !global;
      $baseFontSize: map-get($resolution, baseFontSize) !global;
      $breakpointStart: map-get($resolution, breakpointStart) !global;
      
      // If there is only one resolution in list
      @if (length($resolutions)==1 and $breakpoint==to-lower-case($breakpointName)) {
        $breakpointEnd: 100% !global;
        $nextResolution: false !global;
        @content;
      }
      
      // First breakpoint doesn't have min-value, so use start of next breakpoint as max value
      @if (length($resolutions) > 1 and $i==1 and $breakpoint==to-lower-case($breakpointName)) {
        // Breakpoint #{$i} - #{$breakpointName}
        $nextResolution: nth(map-values($resolutions), $i+1);
        $breakpointEnd: map-get($nextResolution, breakpointStart) - 1px !global;
        @media (max-width: $breakpointEnd) {
          @content;
        }
      }
      
      // Breakpoints in between have min and max values
      // Styles are encapsulated in these resolutions
      @if (length($resolutions) > 1 and $i > 1 and $i < length($resolutions) and $breakpoint==to-lower-case($breakpointName)) {
        // Breakpoint #{$i} - #{$breakpointName}
        $nextResolution: nth(map-values($resolutions), $i+1);
        $breakpointEnd: map-get($nextResolution, breakpointStart) - 1px !global;
        @media (min-width: $breakpointStart) and (max-width: $breakpointEnd) {
          @content;
        }
      }
      
      // Last breakpoint doesn't have max value
      @if (length($resolutions) > 1 and $i > 1 and $i==length($resolutions) and $breakpoint==to-lower-case($breakpointName)) {
        // Breakpoint #{$i} - #{$breakpointName}
        $breakpointEnd: 100% !global;
        @media (min-width: $breakpointStart) {
          @content;
        }
      }
    }
  }
}


/* 

Create responsive styles for all media breakpoints
--------------------------------------------------    
Variables:
$name               - resolution long name
$shortname          - resolution short name
$breakpointStart    - width on which this resolution starts
$baseFontSize       - base font size for this resolution
$fluidWidth         - true/false

Usage: @include mediaAll() { [your CSS] }

*/

@mixin mediaAll() {
  $totalResolutions: length($resolutions);
  
  @for $i from 1 through $totalResolutions {
    // Meaningful var names extracted from array
    $resolution: nth(map-values($resolutions), $i); // Resolution map
    $name: map-get($resolution, name);
    $baseFontSize: map-get($resolution, baseFontSize) !global;
    $breakpointStart: map-get($resolution, breakpointStart) !global;
    $divisions: map-get($resolution, divisions) !global;
    $fluidWidth: map-get($resolution, fluidWidth) !global;
    
    @include media($name) {
      @content;
    }
    
    // "Unset" variables to avoid scope problems
    $baseFontSize: undefined !global;
    $breakpointStart: undefined !global;
    $divisions: undefined !global;
    $fluidWidth: undefined !global;
  }
}


/* 

CREATE NON-RESPONSIVE STYLES FOR MEDIA QUERY RANGE
--------------------------------------------------
This mixin is for styles that don't require values based on responsive typography. It is prudent to use it in these cases:
1. When you want to use easily memorable breakpoint names stored in configuration
2. When you want to output lighter CSS at the end of the build process

Example: http://www.sassmeister.com/gist/bd8b85bf89b11888e6ec205f3a1a56fd

Usage: @include mediaRange(min-resolution-name, max-resolution-name) { [your CSS] }

*/

@mixin mediaRange($breakpointFrom, $breakpointTo) {
  // Get min value
  $breakpointFrom: to-lower-case(unquote($breakpointFrom));
  // Get max value
  $breakpointTo: to-lower-case(unquote($breakpointTo));
  // Total resolutions
  $totalBreakpoints: length($resolutions); // Total resolutions = #{$totalBreakpoints}
  
  
  // GET DATA FROM SASS MAP
  // ----------------------
  @for $i from 1 through $totalBreakpoints {
    $resolution: nth(map-values($resolutions), $i); // Resolution map
    $breakpointName: map-get($resolution, name) !global;
    
    @if ($breakpointName == $breakpointFrom) { // Breakpoint #{$i} #{$breakpointFrom} exists //
      $breakpointStartName: $breakpointFrom !global;
      $breakpointStartNo: $i !global;
      $breakpointStartResolution: map-get($resolution, breakpointStart) !global;
    } 
    
    @if ($breakpointName == $breakpointTo) { // Breakpoint #{$i} #{$breakpointTo} exists //
      $breakpointEndName: $breakpointTo !global;
      $breakpointEndNo: $i !global;
      $breakpointEndResolution: map-get($resolution, breakpointStart) !global;
      
      // If breakpointTo is not the last one in map, it means that end of that breakpoint 
      // is acutally a start of next one
      @if ($breakpointEndNo != $totalBreakpoints) {
        $nextResolution: nth(map-values($resolutions), $i+1);
        $breakpointEndResolution: map-get($nextResolution, breakpointStart) !global;
      }
    }
  }


  // ERROR CHECKING
  // --------------
  @if ($breakpointStartResolution == $breakpointEndResolution) {
    @error "Error: Breakpoint names cannot be the same";
  } 
  @if ($breakpointStartResolution > $breakpointEndResolution) {
    @error "Error: Bad breakpoint order. It should be: @mixin mediaRange(#{$breakpointEndName}, #{$breakpointStartName})"
  }

  
  // Determine breakpoint variations
  // -------------------------------
  @if ($breakpointStartNo == 1) {
    // Starting resolution doesn't have min-width //
    $widthStart: false !global;
  } @else {
    // Starting resolution has min-width //
    $widthStart: true !global;
  }

  @if ($breakpointEndNo == $totalBreakpoints) {
    // End resolution doesn't have max-width //
    $widthEnd: false !global;
  } @else {
    // End resolution has max-width //
    $widthEnd: true !global;
  }
  
  
  // CREATE MEDIA QUERIES
  // --------------------
  
  // No start and no end - doesn't need media query
  @if ($widthStart == false and $widthEnd == false) {
    // Output CSS without media queries //
    @content;
  }
  
  // Has min-width, but no max-width
  @if ($widthStart == true and $widthEnd == false) {
    // Output CSS with min-width media query //
    @media (min-width: $breakpointStartResolution) {
      @content;
    }
  }

  // Doesn't have min-width, but has max-width
  @if ($widthStart == false and $widthEnd == true) {
    // Output CSS with max-width media query //
    @media (max-width: $breakpointEndResolution) {
      @content;
    }    
  }  
  
  // Has both min and max widths
  @if ($widthStart == true and $widthEnd == true) {
    // Output CSS with min and max width media query //
    @media (min-width: $breakpointStartResolution) and (max-width: $breakpointEndResolution) {
      @content;
    }
  }   
}